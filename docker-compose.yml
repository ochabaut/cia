version: '3'
services:
  front:
    build: ./front_student    
    environment:
      REACT_APP_API_URL: localhost:3000
    ports:
      - 8080:3000
    restart: always
    networks:
      - backend
    depends_on: # set a dependency between your service and the database: this means that your application will not run if the db service is not running, but it doesn't assure you that the dabase will be ready to accept incoming connection (so your application could crash untill the db initializes itself)
      - api
    
  db: # the service hosting your MySQL instance
    image: mysql:5.7 # the image and tag docker will pull from docker hub
    container_name: dev_db
    volumes: # this section allows you to configure persistence within multiple restarts
      - db_data:/var/lib/mysql
    restart: always # if the db crash somehow, restart it
    environment: # env variables, you usually set this to override existing ones
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: dev_db
      MYSQL_USER: nsa
      MYSQL_PASSWORD: nsa
    ports:
      - "3306:3306"
    networks:
      - backend

  api:
    container_name: dev_api
    image: sample-express-app
    build: ./back_student
    restart: always
    environment:
      DB_HOST: db
    ports:
      - "3000:3000"
    networks:
      - backend
    depends_on: # set a dependency between your service and the database: this means that your application will not run if the db service is not running, but it doesn't assure you that the dabase will be ready to accept incoming connection (so your application could crash untill the db initializes itself)
      - db

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: pma
    networks:
      - backend
    depends_on: # set a dependency between your service and the database: this means that your application will not run if the db service is not running, but it doesn't assure you that the dabase will be ready to accept incoming connection (so your application could crash untill the db initializes itself)
      - db
    environment:
      PMA_HOST: 172.17.0.1
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
    restart: always
    ports:
      - 8081:80

networks:
  backend:
    driver: bridge
volumes:
  db_data:
